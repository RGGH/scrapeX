permissions:
  contents: write
  actions: write
  id-token: write  # Required for keyless signing with OIDC
name: Build and Release Rust Binary
on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: scrapeX
            archive_name: scrapeX.linux.tar.gz
          - os: windows-latest
            artifact_name: scrapeX.exe
            archive_name: scrapeX.windows.zip
          - os: macos-latest
            artifact_name: scrapeX
            archive_name: scrapeX.macos.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Compress Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/release
          tar -czvf "${{ matrix.archive_name }}" "${{ matrix.artifact_name }}"
      - name: Compress Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path "target/release/${{ matrix.artifact_name }}" -DestinationPath "target/release/${{ matrix.archive_name }}"
        shell: pwsh
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: target/release/${{ matrix.archive_name }}
  release:
    name: Create and Upload Release
    needs: [build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Generate tag
        id: tag
        run: |
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          git tag $TAG_NAME
          git push origin $TAG_NAME
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Display downloaded files
        run: ls -R artifacts
      - name: Prepare release files
        run: |
          mkdir -p release_files
          find artifacts -type f -exec cp {} release_files/ \;
          ls -la release_files/
      # Install Cosign using the GitHub Action
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      # Sign artifacts with Keyless signing
      - name: Sign artifacts
        run: |
          for file in release_files/*; do
            echo "Signing file: $file"
            cosign sign-blob --yes "$file" \
              --output-signature "${file}.sig" \
              --output-certificate "${file}.pem"
            # Verify the files exist
            ls -la "${file}.sig" "${file}.pem" || true
          done
          # Move signature files from working directory to release_files if needed
          find . -maxdepth 1 -name "*.sig" -o -name "*.pem" | xargs -I{} cp {} release_files/ || true
          echo "Files in release_files directory:"
          ls -la release_files/
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release_files/*
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          name: Release ${{ steps.tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
